import html
import logging
import asyncio
from typing import Optional, Callable, Awaitable

from aiogram import Bot
from aiogram.types import Message
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from Bot.Database import MessageCache
from Bot.Utils.crypto import decrypt, encrypt


logger = logging.getLogger(__name__)


def escape_html(text: Optional[str]) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è parse_mode=HTML"""
    return html.escape(text or "")


def build_caption(
    msg_type: str, chat_id: int, chat_title: str, caption: Optional[str]
) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ —É–¥–∞–ª—ë–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ"""
    base = f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: <a href='tg://user?id={chat_id}'><b>{escape_html(chat_title)}</b></a>\n"

    # —Å–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞, –ø–æ—Ç–æ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    decrypted = decrypt(token=caption) if caption else ""
    body = f"<blockquote><b>{escape_html(decrypted)}</b></blockquote>"

    texts = {
        "Message": "üóë –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ:",
        "Photo": "üóë –≠—Ç–æ —Ñ–æ—Ç–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ:",
        "Video": "üóë –≠—Ç–æ –≤–∏–¥–µ–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ:",
        "Video_note": "üóë –≠—Ç–æ—Ç –∫—Ä—É–∂–æ–∫ –±—ã–ª —É–¥–∞–ª—ë–Ω:",
        "Voice": "üóë –≠—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ:",
    }
    return f"{texts.get(msg_type, 'üóë –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:')}\n\n{base}–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {body}"


async def send_deleted_message(
    bot: Bot, msg_type: str, target_id: int, file_id: Optional[str], caption_text: str
) -> None:
    handlers: dict[str, Callable[..., Awaitable[Message]]] = {
        "Message": bot.send_message,
        "Photo": bot.send_photo,
        "Video": bot.send_video,
        "Video_note": bot.send_video_note,
        "Voice": bot.send_voice,
    }

    if msg_type not in handlers:
        logger.warning(f"Unknown message type: {msg_type}")
        return

    kwargs = {"chat_id": target_id}

    if msg_type == "Message":
        kwargs.update(text=caption_text, parse_mode="HTML")
    else:
        media_arg = {
            "Photo": "photo",
            "Video": "video",
            "Video_note": "video_note",
            "Voice": "voice",
        }.get(msg_type)
        kwargs.update(
            {media_arg: file_id, "caption": caption_text, "parse_mode": "HTML"}
        )

    await handlers[msg_type](**kwargs)


async def DeleteHandler(message_id: int, bot: Bot, session: AsyncSession) -> None:
    try:
        request = select(MessageCache).where(MessageCache.Message_id == message_id)
        message = await session.scalar(request)

        if not message:
            return

        caption_text = build_caption(
            message.Type, message.Chat_id, message.Chat_full_name, message.Caption
        )

        # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
        await session.delete(message)
        await session.commit()

        target_id = message.User_id

        await send_deleted_message(
            bot, message.Type, target_id, message.File_id, caption_text
        )

    except Exception as ex:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ DeleteHandler: {ex}")


async def EditHandler(message: Message, session: AsyncSession) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫—ç—à–µ–º"""
    try:
        bot = message.bot
        msg_id = int(f"{message.chat.id}{message.message_id}")
        connection = await bot.get_business_connection(message.business_connection_id)

        stmt = select(MessageCache).where(MessageCache.Message_id == msg_id)
        cached = await session.scalar(stmt)

        if cached:
            old_text = decrypt(token=cached.Caption) if cached.Caption else ""
            new_text = message.text or ""

            cached.Caption = encrypt(text=new_text) or ""

            if message.from_user.id != cached.User_id:
                await bot.send_message(
                    cached.User_id,
                    f"üîè –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={message.from_user.id}'>{escape_html(message.from_user.full_name)}</a> "
                    f"–∏–∑–º–µ–Ω–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
                    f"–°—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç: <blockquote><b>{escape_html(old_text)}</b></blockquote>\n"
                    f"–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: <blockquote><b>{escape_html(new_text)}</b></blockquote>",
                    parse_mode="HTML",
                )
        else:
            new_text = message.text or ""
            cached = MessageCache(
                Message_id=msg_id,
                Chat_id=message.chat.id,
                Chat_full_name=message.from_user.full_name,
                Caption=encrypt(text=new_text),
                Type="Message",
                File_id="",
                User_id=connection.user.id,
            )
            session.add(cached)

            if message.from_user.id != connection.user.id:
                await bot.send_message(
                    connection.user.id,
                    f"üîè –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={message.from_user.id}'>{escape_html(message.from_user.full_name)}</a> "
                    f"–∏–∑–º–µ–Ω–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫—ç—à–µ.\n\n"
                    f"–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: <blockquote><b>{escape_html(new_text)}</b></blockquote>",
                    parse_mode="HTML",
                )

        await session.commit()
        await asyncio.sleep(0.05)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
